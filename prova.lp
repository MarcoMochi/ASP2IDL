(set-logic QF_IDL)
(declare-fun W4 () Bool)
(declare-fun |colored(3)| () Int)
(declare-fun W0 () Bool)
(declare-fun |notChosenColour(3,blue0)| () Int)
(declare-fun bot () Int)
(declare-fun W5 () Bool)
(declare-fun |chosenColour(3,blue0)| () Int)
(declare-fun W1 () Bool)
(declare-fun |notChosenColour(3,green0)| () Int)
(declare-fun W6 () Bool)
(declare-fun |chosenColour(3,green0)| () Int)
(declare-fun W2 () Bool)
(declare-fun W3 () Bool)
(assert (let ((.def_0 (= true W6))) (let ((.def_1 (< |colored(3)| bot))) (let ((.def_2 (= W6 .def_1))) (let ((.def_3 (or W4 W5))) (let ((.def_4 (= .def_1 .def_3))) (let ((.def_5 (< |chosenColour(3,green0)| bot))) (let ((.def_6 (and .def_1 .def_5))) (let ((.def_7 (< |chosenColour(3,green0)| |colored(3)|))) (let ((.def_8 (=> .def_7 .def_6))) (let ((.def_9 (< |chosenColour(3,blue0)| bot))) (let ((.def_10 (and .def_1 .def_9))) (let ((.def_11 (< |chosenColour(3,blue0)| |colored(3)|))) (let ((.def_12 (=> .def_11 .def_10))) (let ((.def_13 (and .def_12 .def_8))) (let ((.def_14 (= W5 .def_7))) (let ((.def_15 (= W4 .def_11))) (let ((.def_16 (and .def_15 .def_14))) (let ((.def_17 (< |notChosenColour(3,green0)| bot))) (let ((.def_18 (= .def_17 W3))) (let ((.def_19 (and .def_17 .def_9))) (let ((.def_20 (< |chosenColour(3,blue0)| |notChosenColour(3,green0)|))) (let ((.def_21 (=> .def_20 .def_19))) (let ((.def_22 (= W3 .def_20))) (let ((.def_23 (< |notChosenColour(3,blue0)| bot))) (let ((.def_24 (= .def_23 W2))) (let ((.def_25 (and .def_23 .def_5))) (let ((.def_26 (< |chosenColour(3,green0)| |notChosenColour(3,blue0)|))) (let ((.def_27 (=> .def_26 .def_25))) (let ((.def_28 (= W2 .def_26))) (let ((.def_29 (= .def_5 W1))) (let ((.def_30 (not .def_17))) (let ((.def_31 (= W1 .def_30))) (let ((.def_32 (= .def_9 W0))) (let ((.def_33 (not .def_23))) (let ((.def_34 (= W0 .def_33))) (let ((.def_35 (and .def_34 true .def_32 .def_31 true .def_29 .def_28 .def_27 .def_24 .def_22 .def_21 .def_18 .def_16 .def_13 .def_4 .def_2 true .def_0))) .def_35)))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)